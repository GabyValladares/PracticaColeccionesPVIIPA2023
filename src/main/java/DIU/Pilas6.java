/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package DIU;

import java.util.Stack;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Usuario
 */
public class Pilas6 extends javax.swing.JInternalFrame {

    /**
     * Creates new form Pilas6
     */
    Stack TorreA;
    Stack TorreB;
    Stack TorreC;

    DefaultTableModel ModeloTorreA, ModeloTorreB, ModeloTorreC;
    int objetivo = 3;

    public Pilas6() {
        initComponents();
        ModeloTorreA = (DefaultTableModel) tblTorreA.getModel();
        ModeloTorreA.setRowCount(3);

        ModeloTorreB = (DefaultTableModel) tblTorreB.getModel();
        ModeloTorreB.setRowCount(3);

        ModeloTorreC = (DefaultTableModel) tblTorreC.getModel();
        ModeloTorreC.setRowCount(3);

        DefaultTableCellRenderer renderA = new DefaultTableCellRenderer();
        renderA.setHorizontalAlignment(SwingConstants.CENTER);
        tblTorreA.getColumnModel().getColumn(0).setCellRenderer(renderA);

        DefaultTableCellRenderer renderB = new DefaultTableCellRenderer();
        renderB.setHorizontalAlignment(SwingConstants.CENTER);
        tblTorreB.getColumnModel().getColumn(0).setCellRenderer(renderB);

        DefaultTableCellRenderer renderC = new DefaultTableCellRenderer();
        renderC.setHorizontalAlignment(SwingConstants.CENTER);
        tblTorreC.getColumnModel().getColumn(0).setCellRenderer(renderC);
    }


    

    private void iniciar() {

        try {
            TorreA = new Stack();
            TorreB = new Stack();
            TorreC = new Stack();
            objetivo = 3;

            for (int x = objetivo; x >= 1; x--) {
                Nodo plataforma = new Nodo();
                String disco = "";

                for (int y = x; y > 0; y--) {
                    disco += "#";
                }

                plataforma.setDato(disco);
                TorreA.push(plataforma);
            }
            PresentarTorreA();
            PresentarTorreB();
            PresentarTorreC();

        } catch (Exception e) {
        }

    }

    private void PresentarTorreA() {
        ((DefaultTableModel) tblTorreA.getModel()).setRowCount(0);

        for (int i = TorreA.size() - 1; i >= 0; i--) {
            Nodo disco = (Nodo) TorreA.elementAt(i);
            String[] rowData = {disco.getDato()};
            ModeloTorreA.addRow(rowData);
        }
    }

    private void PresentarTorreB() {
        ((DefaultTableModel) tblTorreB.getModel()).setRowCount(0);

        for (int i = TorreB.size() - 1; i >= 0; i--) {
            Nodo disco = (Nodo) TorreB.elementAt(i);
            String[] rowData = {disco.getDato()};
            ModeloTorreB.addRow(rowData);
        }
    }

    private void PresentarTorreC() {
        ((DefaultTableModel) tblTorreC.getModel()).setRowCount(0);

        for (int i = TorreC.size() - 1; i >= 0; i--) {
            Nodo disco = (Nodo) TorreC.elementAt(i);
            String[] rowData = {disco.getDato()};
            ModeloTorreC.addRow(rowData);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTorreA = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTorreB = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblTorreC = new javax.swing.JTable();
        btnTorreaAB = new javax.swing.JButton();
        btnTorreAC = new javax.swing.JButton();
        btnTorreBA = new javax.swing.JButton();
        btnTorreBC = new javax.swing.JButton();
        btnTorreCA = new javax.swing.JButton();
        TorreCB = new javax.swing.JButton();
        btnIniciar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("EJERCICIOS CON PILAS 6");

        lblTitulo.setText(" Juego de las Torres de Hanoi para tres discos");

        jScrollPane1.setFocusable(false);

        tblTorreA.setBackground(new java.awt.Color(0, 255, 0));
        tblTorreA.setForeground(new java.awt.Color(0, 0, 0));
        tblTorreA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TORRE A"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTorreA.setAutoscrolls(false);
        tblTorreA.setFocusable(false);
        tblTorreA.setRowSelectionAllowed(false);
        tblTorreA.setShowHorizontalLines(false);
        tblTorreA.setShowVerticalLines(false);
        jScrollPane1.setViewportView(tblTorreA);
        if (tblTorreA.getColumnModel().getColumnCount() > 0) {
            tblTorreA.getColumnModel().getColumn(0).setResizable(false);
        }

        jScrollPane2.setFocusable(false);

        tblTorreB.setBackground(new java.awt.Color(153, 255, 255));
        tblTorreB.setForeground(new java.awt.Color(0, 0, 0));
        tblTorreB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TORRE B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTorreB.setAutoscrolls(false);
        tblTorreB.setFocusable(false);
        tblTorreB.setRowSelectionAllowed(false);
        tblTorreB.setShowHorizontalLines(false);
        tblTorreB.setShowVerticalLines(false);
        jScrollPane2.setViewportView(tblTorreB);
        if (tblTorreB.getColumnModel().getColumnCount() > 0) {
            tblTorreB.getColumnModel().getColumn(0).setResizable(false);
        }

        jScrollPane3.setFocusable(false);

        tblTorreC.setBackground(new java.awt.Color(255, 153, 51));
        tblTorreC.setForeground(new java.awt.Color(0, 0, 0));
        tblTorreC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TORRE C"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTorreC.setAutoscrolls(false);
        tblTorreC.setFocusable(false);
        tblTorreC.setRowSelectionAllowed(false);
        tblTorreC.setShowHorizontalLines(false);
        tblTorreC.setShowVerticalLines(false);
        jScrollPane3.setViewportView(tblTorreC);
        if (tblTorreC.getColumnModel().getColumnCount() > 0) {
            tblTorreC.getColumnModel().getColumn(0).setResizable(false);
        }

        btnTorreaAB.setBackground(new java.awt.Color(153, 255, 255));
        btnTorreaAB.setForeground(new java.awt.Color(0, 0, 0));
        btnTorreaAB.setText("B");
        btnTorreaAB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorreaABActionPerformed(evt);
            }
        });

        btnTorreAC.setBackground(new java.awt.Color(255, 102, 0));
        btnTorreAC.setForeground(new java.awt.Color(0, 0, 0));
        btnTorreAC.setText("C");
        btnTorreAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorreACActionPerformed(evt);
            }
        });

        btnTorreBA.setBackground(new java.awt.Color(0, 255, 0));
        btnTorreBA.setForeground(new java.awt.Color(0, 0, 0));
        btnTorreBA.setText("A");
        btnTorreBA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorreBAActionPerformed(evt);
            }
        });

        btnTorreBC.setBackground(new java.awt.Color(255, 102, 0));
        btnTorreBC.setForeground(new java.awt.Color(0, 0, 0));
        btnTorreBC.setText("C");
        btnTorreBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorreBCActionPerformed(evt);
            }
        });

        btnTorreCA.setBackground(new java.awt.Color(0, 255, 0));
        btnTorreCA.setForeground(new java.awt.Color(0, 0, 0));
        btnTorreCA.setText("A");
        btnTorreCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorreCAActionPerformed(evt);
            }
        });

        TorreCB.setBackground(new java.awt.Color(153, 255, 255));
        TorreCB.setForeground(new java.awt.Color(0, 0, 0));
        TorreCB.setText("B");
        TorreCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TorreCBActionPerformed(evt);
            }
        });

        btnIniciar.setBackground(new java.awt.Color(153, 255, 153));
        btnIniciar.setForeground(new java.awt.Color(0, 0, 0));
        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTorreaAB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTorreAC, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTorreBA, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(btnTorreBC, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTorreCA, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TorreCB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(lblTitulo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTorreAC)
                    .addComponent(btnTorreBA)
                    .addComponent(btnTorreBC)
                    .addComponent(btnTorreCA)
                    .addComponent(TorreCB)
                    .addComponent(btnTorreaAB))
                .addGap(31, 31, 31)
                .addComponent(btnIniciar)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        // TODO add your handling code here:
        this.iniciar();
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void moverDeA_B() {
        try {
            if (!TorreA.isEmpty()) {
                Nodo plataforma = (Nodo) TorreA.peek();

                if (!TorreB.isEmpty()) {
                    Nodo discoB = (Nodo) TorreB.peek();

                    if (plataforma.getDato().compareTo(discoB.getDato()) > 0) {
                        // El disco en A es más grande que el disco en B, no se puede mover
                        return;
                    }
                }

                TorreA.pop();
                TorreB.push(plataforma);

                PresentarTorreA();
                PresentarTorreB();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void btnTorreaABActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorreaABActionPerformed
        // TODO add your handling code here:
        this.moverDeA_B();
    }//GEN-LAST:event_btnTorreaABActionPerformed
    
    private void moverDeA_C() {
        try {
            if (!TorreA.isEmpty()) {
                Nodo plataforma = (Nodo) TorreA.peek();

                if (!TorreC.isEmpty()) {
                    Nodo discoC = (Nodo) TorreC.peek();

                    if (plataforma.getDato().compareTo(discoC.getDato()) > 0) {
                        // El disco en A es más grande que el disco en C, no se puede mover
                        return;
                    }
                }

                TorreA.pop();
                TorreC.push(plataforma);

                PresentarTorreA();
                PresentarTorreC();

                // Verificar si se ha logrado el objetivo
                if (TorreC.size() == objetivo) {
                    JOptionPane.showMessageDialog(null, "Felicidades, has resuelto el problema");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void btnTorreACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorreACActionPerformed
        // TODO add your handling code here:
        this.moverDeA_C();
    }//GEN-LAST:event_btnTorreACActionPerformed

    private void moverDeB_A(){
     try {
            if (!TorreB.isEmpty()) {
                Nodo plataforma = (Nodo) TorreB.peek();

                if (!TorreA.isEmpty()) {
                    Nodo discoA = (Nodo) TorreA.peek();

                    if (plataforma.getDato().compareTo(discoA.getDato()) > 0) {
                        // El disco en A es más grande que el disco en B, no se puede mover
                        return;
                    }
                }

                TorreB.pop();
                TorreA.push(plataforma);

                PresentarTorreA();
                PresentarTorreB();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }   
    }
    
    private void btnTorreBAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorreBAActionPerformed
        // TODO add your handling code here:
        this.moverDeB_A();
    }//GEN-LAST:event_btnTorreBAActionPerformed

    private void moverDeB_C(){
        try {
            if (!TorreB.isEmpty()) {
                Nodo plataforma = (Nodo) TorreB.peek();

                if (!TorreC.isEmpty()) {
                    Nodo discoC = (Nodo) TorreC.peek();

                    if (plataforma.getDato().compareTo(discoC.getDato()) > 0) {
                        // El disco en A es más grande que el disco en C, no se puede mover
                        return;
                    }
                }

                TorreB.pop();
                TorreC.push(plataforma);

                PresentarTorreB();
                PresentarTorreC();

                // Verificar si se ha logrado el objetivo
                if (TorreC.size() == objetivo) {
                    JOptionPane.showMessageDialog(null, "Felicidades, has resuelto el problema");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void btnTorreBCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorreBCActionPerformed
        // TODO add your handling code here:
        this.moverDeB_C();
    }//GEN-LAST:event_btnTorreBCActionPerformed

    private void moverDeC_A(){
        try {
            if (!TorreC.isEmpty()) {
                Nodo plataforma = (Nodo) TorreC.peek();

                if (!TorreA.isEmpty()) {
                    Nodo discoA = (Nodo) TorreA.peek();

                    if (plataforma.getDato().compareTo(discoA.getDato()) > 0) {
                        // El disco en A es más grande que el disco en B, no se puede mover
                        return;
                    }
                }

                TorreC.pop();
                TorreA.push(plataforma);

                PresentarTorreC();
                PresentarTorreA();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }  
    }
    
    private void btnTorreCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorreCAActionPerformed
        // TODO add your handling code here:
        this.moverDeC_A();
    }//GEN-LAST:event_btnTorreCAActionPerformed

    private void moverDeC_B(){
        try {
            if (!TorreC.isEmpty()) {
                Nodo plataforma = (Nodo) TorreC.peek();

                if (!TorreB.isEmpty()) {
                    Nodo discoB = (Nodo) TorreB.peek();

                    if (plataforma.getDato().compareTo(discoB.getDato()) > 0) {
                        // El disco en A es más grande que el disco en B, no se puede mover
                        return;
                    }
                }

                TorreC.pop();
                TorreB.push(plataforma);

                PresentarTorreB();
                PresentarTorreC();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }  
    }
    
    private void TorreCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TorreCBActionPerformed
        // TODO add your handling code here:
        this.moverDeC_B();
    }//GEN-LAST:event_TorreCBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton TorreCB;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnTorreAC;
    private javax.swing.JButton btnTorreBA;
    private javax.swing.JButton btnTorreBC;
    private javax.swing.JButton btnTorreCA;
    private javax.swing.JButton btnTorreaAB;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tblTorreA;
    private javax.swing.JTable tblTorreB;
    private javax.swing.JTable tblTorreC;
    // End of variables declaration//GEN-END:variables
}
